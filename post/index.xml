<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Pwnation Site</title>
    <link>http://Pwnation.github.io/post/</link>
    <description>Recent content in Posts on Pwnation Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Feb 2018 11:30:18 +0100</lastBuildDate>
    
	<atom:link href="http://Pwnation.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NgrBot - Malware capabilities analysis (Part 3)</title>
      <link>http://Pwnation.github.io/post/ngrbot/malware_capabilities/</link>
      <pubDate>Sun, 04 Feb 2018 11:30:18 +0100</pubDate>
      
      <guid>http://Pwnation.github.io/post/ngrbot/malware_capabilities/</guid>
      <description>Resume At this point we found or self in the last state of our analysis where we are going to understand what does the Malware once it is injected and it starts to do the real Malware actions to the victim machine.
We have seen before that in section .data that provides as some idea of what kind of actions it can takes:
 Anti-virus detection IRC commands: USER, NICK, JOIN, PART, PRIVMSG, QUIT, PONG, PING, PRIVMSG Browsers injection: i e x p l o r e .</description>
    </item>
    
    <item>
      <title>NgrBot - Dropper analysis (Part 2)</title>
      <link>http://Pwnation.github.io/post/ngrbot/dropper_analisys/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/ngrbot/dropper_analisys/</guid>
      <description>Resume Until now we have seen that the original Visual Basic executable just has injected a MZ executable inside a new process. And as we will see throw this post, it is a dropper/deployer that will deploy itself in the system and tries to infect as many as possible legit process running in the victim machine.
Reversing unpacked executable Before get into the static analysis of the sample, sometimes is really useful to take a look of its behaviour, so we will do a quick dynamic analysis of its execution.</description>
    </item>
    
    <item>
      <title>NgrBot - Packer analysis (Part 1)</title>
      <link>http://Pwnation.github.io/post/ngrbot/vb_packer_analysis/</link>
      <pubDate>Sat, 20 Jan 2018 10:30:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/ngrbot/vb_packer_analysis/</guid>
      <description>Abstract As malware analyst one of the most tricky executable to analyze that I faced are the P-code visual basic executables. That is why I am writing this post, to help all new analysts who need some tips to unmask this kind of tricky malicious executable :).
In order to illustrate the explanation I will use a malware sample known as NgrBot which comes ‚Äúpacked‚Äù in a Visual Basic executable.</description>
    </item>
    
    <item>
      <title>GoogleCTF 2017 - Inst Prof (Part 2)</title>
      <link>http://Pwnation.github.io/post/googlectf2017/inst_prof_p2/</link>
      <pubDate>Fri, 01 Dec 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/googlectf2017/inst_prof_p2/</guid>
      <description>Introduction This post is the second part of the solucion of Inst Prof, an initial challenge of the GoogleCTF 2017.
Basically, the analysis phase was already done in part1, so, in this post, we are going to focus with the exploitation phase.
Flash reminder Just to remember what we explained in part 1, here is an easy list with the normal flow of the process. Here is a patched version of the binary as we explained in the part 1.</description>
    </item>
    
    <item>
      <title>GoogleCTF 2017 - Inst Prof (Part 1)</title>
      <link>http://Pwnation.github.io/post/googlectf2017/inst_prof_p1/</link>
      <pubDate>Wed, 30 Aug 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/googlectf2017/inst_prof_p1/</guid>
      <description>In this challenge we are given a binary that is running remotely at inst-prof.ctfcompetition.com:1337.
Probably the flag will be somewhere in the server.
We can start getting some basic information of the binary using the unix command file.
$ file inst_prof inst_prof: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=61e50b540c3c8e7bcef3cb73f3ad2a10c2589089, not stripped  Interesting! It is an ELF, a binary for unix systems and it has been compiled for a 64 bits architecture.</description>
    </item>
    
    <item>
      <title>Garage door RF communication</title>
      <link>http://Pwnation.github.io/post/garage_door/rfcommunication/</link>
      <pubDate>Sun, 20 Aug 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/garage_door/rfcommunication/</guid>
      <description>Key words  Radio frequency(RF) Software Difine Radio (SDR) Universal Hacker Radio (UHR)  Abstract This in the first one of a serie of posts where we are going to revese engineered a garage radio control to undertand how it works. In this first post We will describe how we have proceed in order to revese engineered the RF signal, present our conclusions about our findings and indicate which are going to be our next steps to hack the device.</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 4</title>
      <link>http://Pwnation.github.io/post/tamuctf2017/pwn4/</link>
      <pubDate>Fri, 11 Aug 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/tamuctf2017/pwn4/</guid>
      <description>Is curious that this specific challenge had more value than the previous one (pwn3).
As we will see below, it was way easier. Lets take a look with r2.
$ wget -q https://github.com/BlackHoods/BlackHoods.github.io/raw/master/assets/TamuCTF2017/pwn4/pwn4 $ r2 -A -c &amp;#39;afl&amp;#39; pwn4  [x] Analyze all flags starting with sym. and entry0 (aa) [x] Analyze len bytes of instructions for references (aar) [x] Analyze function calls (aac) [x] Use -AA or aaaa to perform additional experimental analysis.</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 3</title>
      <link>http://Pwnation.github.io/post/tamuctf2017/pwn3/</link>
      <pubDate>Thu, 10 Aug 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/tamuctf2017/pwn3/</guid>
      <description>And here we are, with another pwning challenge üòÅ.
$ wget -q https://github.com/BlackHoods/BlackHoods.github.io/tree/master/assets/TamuCTF2017/pwn3 $ r2 pwn3  Once downloaded and opened with radare2, go for it and list its functions.
[0x080484b0]&amp;gt; aaa [x] Analyze all flags starting with sym. and entry0 (aa) [x] Analyze len bytes of instructions for references (aar) [x] Analyze function calls (aac) [x] Use -AA or aaaa to perform additional experimental analysis. [x] Constructing a function name for fcn.</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 2</title>
      <link>http://Pwnation.github.io/post/tamuctf2017/pwn2/</link>
      <pubDate>Wed, 09 Aug 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/tamuctf2017/pwn2/</guid>
      <description>We are given a source code file and a binary which is being run remotely. Let&amp;rsquo;s a analyze it with radare2:
$ wget https://github.com/BlackHoods/BlackHoods.github.io/raw/master/assets/TamuCTF2017/pwn2/pwn2 $ r2 pwn2  [0x08048450]&amp;gt; aaa [x] Analyze all flags starting with sym. and entry0 (aa) [x] Analyze len bytes of instructions for references (aar) [x] Analyze function calls (aac) [x] Use -AA or aaaa to perform additional experimental analysis. [x] Constructing a function name for fcn.</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 1</title>
      <link>http://Pwnation.github.io/post/tamuctf2017/pwn1/</link>
      <pubDate>Tue, 08 Aug 2017 18:56:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/tamuctf2017/pwn1/</guid>
      <description>We are told that there is a binary running remotely and its code is available to download. Lets download and open it with r2.
$ wget https://ctf.tamu.edu/files/7e968d03d9caa11a2f4f2909bd3cabc9/pwn1 $ r2 -A pwn1   At some point the link will be broken, if so you can use the one from the repository.
 Now that the binary is opened, lets see some stuff inside it.
[0x08048450]&amp;gt; afl 0x080483903 35 sym._init 0x080483d01 6 sym.</description>
    </item>
    
  </channel>
</rss>