<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ctfs on BlackHoods Site</title>
    <link>http://BlackHoods.github.io/post_categories/ctfs/</link>
    <description>Recent content in Ctfs on BlackHoods Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 May 2017 18:56:18 +0200</lastBuildDate>
    
	<atom:link href="http://BlackHoods.github.io/post_categories/ctfs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TamuCTF 2017 - Pwn 4</title>
      <link>http://BlackHoods.github.io/post/tamuctf2017/pwn4/</link>
      <pubDate>Tue, 30 May 2017 18:56:18 +0200</pubDate>
      
      <guid>http://BlackHoods.github.io/post/tamuctf2017/pwn4/</guid>
      <description>Is curious that this specific challenge is more worthy than the previous one (pwn3). As we will see it is way easier.
Lets take a look to the code with r2
$ r2 pwn4 -c &amp;#39;aaa; afl&amp;#39;  We can see four interesting functions:
 sym.flag_func() at 0x080484cb sym.func2() at 0x080484e4 sym.func1() at 0x080484fd sym.main() at 0x08048515  [0x080483d0]&amp;gt; s sym.flag_func; V; p; p # be positioned at start of sym.</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 3</title>
      <link>http://BlackHoods.github.io/post/tamuctf2017/pwn3/</link>
      <pubDate>Mon, 29 May 2017 18:56:18 +0200</pubDate>
      
      <guid>http://BlackHoods.github.io/post/tamuctf2017/pwn3/</guid>
      <description>Here we are, with another pwning challenge. Let&amp;rsquo;s start üòÅ.
$ wget https://ctf.tamu.edu/files/e02cea87728137d5da449db45dcb875e/pwn3 $ r2 pwn3 [0x080484b0]&amp;gt; aaa [0x080484b0]&amp;gt; afl . . 0x080485ab 4 103 sym.print_flag 0x08048612 1 102 sym.main . .  Two interesting functions, and again, one of them is never called.
[0x080484b0]&amp;gt; axt sym.print_flag # Search for cross references to this function in the entire binary [0x080484b0]&amp;gt;  Lets check what is happing inside the main one.</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 2</title>
      <link>http://BlackHoods.github.io/post/tamuctf2017/pwn2/</link>
      <pubDate>Sun, 28 May 2017 18:56:18 +0200</pubDate>
      
      <guid>http://BlackHoods.github.io/post/tamuctf2017/pwn2/</guid>
      <description>We are given a source code file and a binary which is being run remotely. Let&amp;rsquo;s a analyze it with radare2:
$ wget https://ctf.tamu.edu/files/dacdf9d7951deede662f1b89e4ec2a90/pwn2 $ r2 pwn2 [0x08048450]&amp;gt; aaa	# Analyze [0x08048450]&amp;gt; afl	# List functions found . . 0x0804854b 4 103  sym.print_flag 0x080485b2 1 84  sym.echo 0x08048606 1 36  sym.main . .  We can see similar functions to the previous pwning challenge, but there a complication here: if we look closely&amp;hellip;</description>
    </item>
    
    <item>
      <title>TamuCTF 2017 - Pwn 1</title>
      <link>http://BlackHoods.github.io/post/tamuctf2017/pwn1/</link>
      <pubDate>Sat, 27 May 2017 18:56:18 +0200</pubDate>
      
      <guid>http://BlackHoods.github.io/post/tamuctf2017/pwn1/</guid>
      <description>We are told that there is a binary running remotely and its code is available to download. Lets download and open it with r2.
$ wget https://ctf.tamu.edu/files/7e968d03d9caa11a2f4f2909bd3cabc9/pwn1 $ r2 pwn1  Now that the binary is opened, we need to analyze its content.
 [0x08048450]&amp;gt; afl 0x08048390 3 35  sym._init 0x080483b3 1 25  fcn.080483b3 0x080483cc 1 4  sub.gets_12_3cc 0x080483d0 1 6  sym.imp.gets 0x080483d6 2 10 -&amp;gt; 22  fcn.</description>
    </item>
    
  </channel>
</rss>