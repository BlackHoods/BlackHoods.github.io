<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malware on Pwnation Site</title>
    <link>http://Pwnation.github.io/tags/malware/</link>
    <description>Recent content in Malware on Pwnation Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 04 Feb 2018 11:30:18 +0100</lastBuildDate>
    
	<atom:link href="http://Pwnation.github.io/tags/malware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NgrBot - Malware capabilities analysis (Part 3)</title>
      <link>http://Pwnation.github.io/post/ngrbot/malware_capabilities/</link>
      <pubDate>Sun, 04 Feb 2018 11:30:18 +0100</pubDate>
      
      <guid>http://Pwnation.github.io/post/ngrbot/malware_capabilities/</guid>
      <description>Resume At this point we found or self in the last state of our analysis where we are going to understand what does the Malware once it is injected and it starts to do the real Malware actions to the victim machine.
We have seen before that in section .data that provides as some idea of what kind of actions it can takes:
 Anti-virus detection IRC commands: USER, NICK, JOIN, PART, PRIVMSG, QUIT, PONG, PING, PRIVMSG Browsers injection: i e x p l o r e .</description>
    </item>
    
    <item>
      <title>NgrBot - Dropper analysis (Part 2)</title>
      <link>http://Pwnation.github.io/post/ngrbot/dropper_analisys/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/ngrbot/dropper_analisys/</guid>
      <description>Resume Until now we have seen that the original Visual Basic executable just has injected a MZ executable inside a new process. And as we will see throw this post, it is a dropper/deployer that will deploy itself in the system and tries to infect as many as possible legit process running in the victim machine.
Reversing unpacked executable Before get into the static analysis of the sample, sometimes is really useful to take a look of its behaviour, so we will do a quick dynamic analysis of its execution.</description>
    </item>
    
    <item>
      <title>NgrBot - Packer analysis (Part 1)</title>
      <link>http://Pwnation.github.io/post/ngrbot/vb_packer_analysis/</link>
      <pubDate>Sat, 20 Jan 2018 10:30:18 +0200</pubDate>
      
      <guid>http://Pwnation.github.io/post/ngrbot/vb_packer_analysis/</guid>
      <description>Abstract As malware analyst one of the most tricky executable to analyze that I faced are the P-code visual basic executables. That is why I am writing this post, to help all new analysts who need some tips to unmask this kind of tricky malicious executable :).
In order to illustrate the explanation I will use a malware sample known as NgrBot which comes “packed” in a Visual Basic executable.</description>
    </item>
    
  </channel>
</rss>